import { oneDark } from "@codemirror/theme-one-dark";
import CodeMirror from "@uiw/react-codemirror";
import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useRef, useState } from "react";

const Home: NextPage = () => {
  const pyodide = useRef();

  // Load Pyodide when page loads
  // TODO: Why does async function return "Pyodide is already loading?"
  // Prevent duplicate loads
  // @ts-expect-error
  useEffect(async () => {
    // @ts-ignore
    pyodide.current = await globalThis.loadPyodide({
      indexURL: "https://cdn.jsdelivr.net/pyodide/v0.19.1/full/",
    });
  }, []);

  const code = useRef();
  // Use state hook to store output, as it triggers re-render of
  // relevant parts - ref doesn't.
  const [output, setOutput] = useState();

  // Execute code.
  // async awaits code execution before printing to console
  async function runCode() {
    let input = code.current;
    // TODO: Check for undefined
    // @ts-expect-error
    await setOutput(pyodide.current.runPython(input));
    await console.log(output)
  }

  return (
    <div className=" bg-slate-900">
      <Head>
        <title>Sandbox</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex flex-col items-start justify-center min-h-screen py-4">
        <div className="flex flex-row items-center justify-between w-screen h-full px-6">
          <h1 className="text-xl font-medium text-slate-100">
            üèó&nbsp;&nbsp;Sandbox
          </h1>
          <button
            className="px-3 py-2 font-medium text-blue-100 transition-all bg-blue-600 rounded-md hover:bg-blue-700"
            onClick={runCode}
          >
            ‚ñ∂&nbsp;&nbsp;Run code
          </button>
        </div>
        <div className="grid flex-1 w-screen grid-cols-2 gap-6 px-4 py-4 h-content">
          <div className="flex flex-col items-start w-full px-4 py-4 rounded bg-slate-800 text-slate-200">
            blah blah
          </div>
          <div className="flex flex-col gap-6">
            <CodeMirror
              theme={oneDark}
              value='print("Hello CSESoc Education!")'
              height="100%"
              className="relative overflow-hidden rounded h-2/3"
              // @ts-expect-error
              onChange={(value) => (code.current = value)}
            />

            <div className="px-4 py-4 font-mono rounded bg-slate-800 text-slate-100 h-1/3">
              {output}
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

export default Home;
